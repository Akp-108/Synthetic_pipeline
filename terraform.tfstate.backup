{
  "version": 4,
  "terraform_version": "1.3.4",
  "serial": 76,
  "lineage": "8bee5eff-a9f5-549a-162a-d5564b982495",
  "outputs": {},
  "resources": [
    {
      "module": "module.synthetic_monitor",
      "mode": "managed",
      "type": "newrelic_synthetics_script_monitor",
      "name": "monitor",
      "provider": "module.synthetic_monitor.provider[\"registry.terraform.io/newrelic/newrelic\"]",
      "instances": [
        {
          "index_key": "Account1",
          "schema_version": 0,
          "attributes": {
            "account_id": 3771867,
            "enable_screenshot_on_failure_and_script": null,
            "guid": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfDU3ZmI1N2Q5LWU2ZTYtNDI4ZC05Yzk1LTI1ZWMzMmU0NzhmYg",
            "id": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfDU3ZmI1N2Q5LWU2ZTYtNDI4ZC05Yzk1LTI1ZWMzMmU0NzhmYg",
            "location_private": [],
            "locations_public": [
              "AP_EAST_1",
              "AP_SOUTH_1"
            ],
            "name": "Account1",
            "period": "EVERY_6_HOURS",
            "runtime_type": "NODE_API",
            "runtime_type_version": "16.10",
            "script": "const axios = require('axios');\r\nlet data = [];\r\nconst licenseKey='7db04187d9f371437237a0285684e944FFFFNRAL';\r\nconst apiKey='NRAK-0EWSWVM2VZG1ZGGVIMHIPZOWIHQ'\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3724791) { nrql(query: \"SELECT largestContentfulPaint, firstInputDelay, cumulativeLayoutShift, appName, browserTransactionName, firstPaint FROM PageViewTiming SINCE 1 day ago WHERE entityGuid = \\'MzcyNDc5MXxCUk9XU0VSfEFQUExJQ0FUSU9OfDU5NDM5MjQ5MQ\\' and appName = \\'CEQ-EKART\\' LIMIT MAX\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    data = response.data.data.actor.account.nrql.results;\r\n    console.log(data);\r\n\r\n    // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.largestContentfulPaint || metric.firstPaint || 0,\r\n        timestamp: metric.timestamp,\r\n        attributes: {\r\n          account:\"account1\",\r\n          'host.name': 'dev.server.com',\r\n          appName: 'GraphiQL-GetPost',\r\n          browserTransactionName: metric.browserTransactionName||\"null\",\r\n          cumulativeLayoutShift: metric.cumulativeLayoutShift || \"null\",\r\n          firstInputDelay: metric.firstInputDelay || \"null\",\r\n          largestContentfulPaint: metric.largestContentfulPaint || \"null\",\r\n          firstPaint: metric.firstPaint || \"null\"\r\n        }\r\n      }]\r\n    }));\r\n\r\n    // Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n\r\n//Get Location\r\n\r\n\r\nconst currentTimeInEpoch = Math.floor(Date.now() / 1000);\r\n\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3724791) { nrql(query: \"SELECT count(*) FROM PageView WHERE entityGuid = \\u0027MzcyNDc5MXxCUk9XU0VSfEFQUExJQ0FUSU9OfDU5NDM5MjQ5MQ\\u0027 FACET pageUrl, city, regionCode, countryCode LIMIT MAX\\\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    let data = response.data.data.actor.account.nrql.results;\r\n    console.log(data)\r\n// Define the metrics array\r\n\r\n// Loop through the data and create a metric object for each item\r\n//     // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.count,\r\n        timestamp: currentTimeInEpoch,\r\n        attributes: {\r\n          'nameMetric': 'pageView/location',\r\n           appName: 'GraphiQL-GetPost',\r\n           pageUrl: metric.facet[0],\r\n           city: metric.facet[1],\r\n           regionCode: metric.facet[2],\r\n           countryCode: metric.facet[3],\r\n           count: metric.count,\r\n           account: \"account1\"\r\n        }\r\n      }]\r\n    }));\r\n    \r\n\r\nconsole.log(metrics)\r\n//Send the metrics array to the New Relic Metric API using your preferred method\r\n\r\n\r\n    //Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n",
            "script_language": "JAVASCRIPT",
            "status": "ENABLED",
            "tag": [
              {
                "key": "some_key",
                "values": [
                  "some_value"
                ]
              }
            ],
            "type": "SCRIPT_API"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        },
        {
          "index_key": "Account2",
          "schema_version": 0,
          "attributes": {
            "account_id": 3771867,
            "enable_screenshot_on_failure_and_script": null,
            "guid": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfDZhZmQ3NDA4LWYxZjktNDA0NC1iNjVjLTRmMTExMWI3MDg3OQ",
            "id": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfDZhZmQ3NDA4LWYxZjktNDA0NC1iNjVjLTRmMTExMWI3MDg3OQ",
            "location_private": [],
            "locations_public": [
              "AP_EAST_1",
              "AP_SOUTH_1"
            ],
            "name": "Account2",
            "period": "EVERY_6_HOURS",
            "runtime_type": "NODE_API",
            "runtime_type_version": "16.10",
            "script": "\r\nconst axios = require('axios');\r\nlet data = [];\r\nconst licenseKey='7db04187d9f371437237a0285684e944FFFFNRAL';\r\nconst apiKey='NRAK-T0MKU3RIWIUL1POQ1NBE20548IU'\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3627407) { nrql(query: \\\"SELECT largestContentfulPaint, firstInputDelay, cumulativeLayoutShift, appName, browserTransactionName, firstPaint FROM PageViewTiming SINCE 1 day ago WHERE entityGuid = \\u0027MzYyNzQwN3xCUk9XU0VSfEFQUExJQ0FUSU9OfDEzODYwMDI1NzE\\u0027 and appName = \\u0027FoodMe\\u0027 LIMIT MAX\\\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    data = response.data.data.actor.account.nrql.results;\r\n    console.log(data);\r\n\r\n    // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.largestContentfulPaint || metric.firstPaint || 0,\r\n        timestamp: metric.timestamp,\r\n        attributes: {\r\n          account: \"account2\",\r\n          'host.name': 'dev.server.com',\r\n          appName: 'FoodMe',\r\n          browserTransactionName: metric.browserTransactionName||\"null\",\r\n          cumulativeLayoutShift: metric.cumulativeLayoutShift || \"null\",\r\n          firstInputDelay: metric.firstInputDelay || \"null\",\r\n          largestContentfulPaint: metric.largestContentfulPaint || \"null\",\r\n          firstPaint: metric.firstPaint || \"null\"\r\n        }\r\n      }]\r\n    }));\r\n\r\n    // Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n\r\n//Get Location\r\n\r\n\r\nconst currentTimeInEpoch = Math.floor(Date.now() / 1000);\r\n\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3627407) { nrql(query: \\\"SELECT count(*)  FROM PageView WHERE entityGuid = \\u0027MzYyNzQwN3xCUk9XU0VSfEFQUExJQ0FUSU9OfDEzODYwMDI1NzE\\u0027 and countryCode = \\u0027IN\\u0027  FACET pageUrl, city, regionCode, countryCode  LIMIT MAX\\\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    let data = response.data.data.actor.account.nrql.results;\r\n    console.log(data)\r\n// Define the metrics array\r\n\r\n// Loop through the data and create a metric object for each item\r\n//     // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.count,\r\n        timestamp: currentTimeInEpoch,\r\n        attributes: {\r\n          'nameMetric': 'pageView/location',\r\n          account: \"account2\",\r\n           appName: 'FoodMe',\r\n           pageUrl: metric.facet[0],\r\n           city: metric.facet[1],\r\n           regionCode: metric.facet[2],\r\n           countryCode: metric.facet[3],\r\n           count: metric.count\r\n        }\r\n      }]\r\n    }));\r\n    \r\n\r\nconsole.log(metrics)\r\n//Send the metrics array to the New Relic Metric API using your preferred method\r\n\r\n\r\n    //Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n\r\n",
            "script_language": "JAVASCRIPT",
            "status": "ENABLED",
            "tag": [
              {
                "key": "some_key",
                "values": [
                  "some_value"
                ]
              }
            ],
            "type": "SCRIPT_API"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        },
        {
          "index_key": "Account3",
          "schema_version": 0,
          "attributes": {
            "account_id": 3771867,
            "enable_screenshot_on_failure_and_script": null,
            "guid": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfGJlOTQ2ZTg3LTg0MDYtNGQ2OS05NGMxLTA3NmM1YzAxNWJhMg",
            "id": "Mzc3MTg2N3xTWU5USHxNT05JVE9SfGJlOTQ2ZTg3LTg0MDYtNGQ2OS05NGMxLTA3NmM1YzAxNWJhMg",
            "location_private": [],
            "locations_public": [
              "AP_EAST_1",
              "AP_SOUTH_1"
            ],
            "name": "Account3",
            "period": "EVERY_6_HOURS",
            "runtime_type": "NODE_API",
            "runtime_type_version": "16.10",
            "script": "const axios = require('axios');\r\nlet data = [];\r\nconst licenseKey='7db04187d9f371437237a0285684e944FFFFNRAL';\r\nconst apiKey='NRAK-IXMD84CHERKDM7LHK64S7M7D2FE'\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3655372) { nrql(query: \\\"SELECT largestContentfulPaint, firstInputDelay, cumulativeLayoutShift, appName, browserTransactionName, firstPaint FROM PageViewTiming SINCE 1 day ago WHERE entityGuid = \\u0027MzY1NTM3MnxCUk9XU0VSfEFQUExJQ0FUSU9OfDExMzQyNTY2MTY\\u0027 and appName = \\u0027FoodMe\\u0027 LIMIT MAX\\\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    data = response.data.data.actor.account.nrql.results;\r\n    console.log(data);\r\n\r\n    // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.largestContentfulPaint || metric.firstPaint || 0,\r\n        timestamp: metric.timestamp,\r\n        attributes: {\r\n          account:\"account3\",\r\n          'host.name': 'dev.server.com',\r\n          appName: 'FoodMe2',\r\n          browserTransactionName: metric.browserTransactionName||\"null\",\r\n          cumulativeLayoutShift: metric.cumulativeLayoutShift || \"null\",\r\n          firstInputDelay: metric.firstInputDelay || \"null\",\r\n          largestContentfulPaint: metric.largestContentfulPaint || \"null\",\r\n          firstPaint: metric.firstPaint || \"null\"\r\n        }\r\n      }]\r\n    }));\r\n\r\n    // Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n\r\n//Get Location\r\n\r\n\r\nconst currentTimeInEpoch = Math.floor(Date.now() / 1000);\r\n\r\naxios({\r\n  method: 'get',\r\n  url: 'https://api.newrelic.com/graphql',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'API-Key': apiKey\r\n  },\r\n  params: {\r\n    query: '{ actor { account(id: 3655372) { nrql(query: \\\"SELECT count(*) FROM PageView WHERE entityGuid =\\u0027MzY1NTM3MnxCUk9XU0VSfEFQUExJQ0FUSU9OfDExMzQyNTY2MTY\\u0027 FACET pageUrl, city, regionCode, countryCode LIMIT MAX\\\") { results } } } }'\r\n\r\n  }\r\n})\r\n  .then(response =\u003e {\r\n    let data = response.data.data.actor.account.nrql.results;\r\n    console.log(data)\r\n// Define the metrics array\r\n\r\n// Loop through the data and create a metric object for each item\r\n//     // Create array of metric objects\r\n    const metrics = data.map(metric =\u003e ({\r\n      metrics: [{\r\n        name: 'Core Web Vitals',\r\n        type: 'gauge',\r\n        value: metric.count,\r\n        timestamp: currentTimeInEpoch,\r\n        attributes: {\r\n          'nameMetric': 'pageView/location',\r\n           appName: 'FoodMe2',\r\n           pageUrl: metric.facet[0],\r\n           city: metric.facet[1],\r\n           regionCode: metric.facet[2],\r\n           countryCode: metric.facet[3],\r\n           count: metric.count,\r\n           account: \"account3\"\r\n        }\r\n      }]\r\n    }));\r\n    \r\n\r\nconsole.log(metrics)\r\n//Send the metrics array to the New Relic Metric API using your preferred method\r\n\r\n\r\n    //Send POST request to Metric API\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://metric-api.newrelic.com/metric/v1',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Api-Key': licenseKey\r\n      },\r\n      data: metrics\r\n    })\r\n      .then(response =\u003e {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error =\u003e {\r\n        console.log(error);\r\n      });\r\n  })\r\n  .catch(error =\u003e {\r\n    console.log(error);\r\n  });\r\n\r\n",
            "script_language": "JAVASCRIPT",
            "status": "ENABLED",
            "tag": [
              {
                "key": "some_key",
                "values": [
                  "some_value"
                ]
              }
            ],
            "type": "SCRIPT_API"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}
